{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","INITIAL_STATE","board","score","status","moved","forEach","row","rowIndex","originalRow","newRow","mergeRow","JSON","stringify","addTile","checkGameStatus","reverse","transposed","transpose","i","filter","num","mergedRow","length","push","emptyCells","cell","colIndex","col","Math","floor","random","map","some","includes","flat","every","matrix","_","module","exports","game","startButton","document","querySelector","gameField","gameScore","messageContainer","messageLose","messageWin","messageStart","updateGameField","state","getState","querySelectorAll","index","value","textContent","className","classList","add","getScore","updateMessage","getStatus","toggle","updateButtonLabel","addEventListener","restart","start","event","key","moveLeft","moveRight","moveUp","moveDown"],"mappings":"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","file":"main.521cf70d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.INITIAL_STATE = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.board = initialState || this.INITIAL_STATE;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    this.board.forEach((row, rowIndex) => {\n      const originalRow = [...row];\n      const newRow = this.mergeRow(row);\n\n      this.board[rowIndex] = newRow;\n\n      if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n    });\n\n    if (moved) {\n      this.addTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    this.board.forEach((row, rowIndex) => {\n      const originalRow = [...row];\n      const newRow = this.mergeRow(row.reverse()).reverse();\n\n      this.board[rowIndex] = newRow;\n\n      if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n    });\n\n    if (moved) {\n      this.addTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const transposed = this.transpose(this.board);\n\n    transposed.forEach((row, rowIndex) => {\n      const originalRow = [...row];\n      const newRow = this.mergeRow(row);\n\n      transposed[rowIndex] = newRow;\n\n      if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n    });\n\n    if (moved) {\n      this.board = this.transpose(transposed);\n      this.addTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const transposed = this.transpose(this.board);\n\n    transposed.forEach((row, rowIndex) => {\n      const originalRow = [...row];\n      const newRow = this.mergeRow(row.reverse()).reverse();\n\n      transposed[rowIndex] = newRow;\n\n      if (JSON.stringify(originalRow) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n    });\n\n    if (moved) {\n      this.board = this.transpose(transposed);\n      this.addTile();\n    }\n    this.checkGameStatus();\n  }\n\n  mergeRow(row) {\n    const newRow = row.filter((num) => num);\n    const mergedRow = [];\n    let i = 0;\n\n    while (i < newRow.length) {\n      if (i < newRow.length - 1 && newRow[i] === newRow[i + 1]) {\n        mergedRow.push(newRow[i] * 2);\n        this.score += newRow[i] * 2;\n        i += 2;\n      } else {\n        mergedRow.push(newRow[i]);\n        i++;\n      }\n    }\n\n    while (mergedRow.length < 4) {\n      mergedRow.push(0);\n    }\n\n    return mergedRow;\n  }\n\n  addTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row, col } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addTile();\n      this.addTile();\n    }\n  }\n\n  restart() {\n    this.board = this.INITIAL_STATE.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n\n      return;\n    }\n\n    if (this.board.flat().every((cell) => cell !== 0)) {\n      const movesAvailable = this.board.some((row, rowIndex) => {\n        return row.some((cell, colIndex) => {\n          return (\n            (colIndex < 3 && cell === row[colIndex + 1]) ||\n            (rowIndex < 3 && cell === this.board[rowIndex + 1][colIndex])\n          );\n        });\n      });\n\n      if (!movesAvailable) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.button.start');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst messageContainer = document.querySelector('.message-container');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  game.restart();\n  game.start();\n  updateGameField();\n  messageStart.classList.add('hidden');\n  updateButtonLabel();\n});\n\nfunction updateGameField() {\n  const state = game.getState();\n  const cells = gameField.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const value = state[Math.floor(index / 4)][index % 4];\n\n    cell.textContent = value !== 0 ? value : '';\n    cell.className = 'field-cell';\n\n    if (value) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  gameScore.textContent = game.getScore();\n  updateMessage();\n}\n\nfunction updateMessage() {\n  const status = game.getStatus();\n\n  messageLose.classList.toggle('hidden', status !== 'lose');\n  messageWin.classList.toggle('hidden', status !== 'win');\n}\n\nfunction updateButtonLabel() {\n  if (game.getStatus() === 'playing') {\n    startButton.textContent = 'Restart';\n  } else {\n    startButton.textContent = 'Start';\n  }\n}\n\ndocument.addEventListener('keydown', (event) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateGameField();\n  updateButtonLabel();\n});\n"]}